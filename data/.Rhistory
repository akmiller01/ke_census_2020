cut.vec = cut(vec,breaks=breaks)
cut.low = as.numeric(str_match(cut.vec, "\\((.*?),")[,2])
cut.high = as.numeric(str_match(cut.vec, ",(.*?)\\]")[,2])
cut.nice = paste0(round(cut.low)," to ",round(cut.high))
return(cut.nice)
}
tot_list = list()
tot_index = 1
for(url in urls){
opt.df = yahoo_opt(url)
underlying = opt.df$underlying[[1]]
expiry = opt.df$expiry[1]
opt.df$int.and.volume = psum(opt.df$open.int, opt.df$volume, na.rm=T)
opt.df = subset(opt.df,price>0 & (int.and.volume)>0)
if(nrow(opt.df)<max_opt){next}
opt.df$original_order = c(1:nrow(opt.df))
opt.df = opt.df[order(-opt.df$volume),][c(1:max_opt),]
opt.df = opt.df[order(opt.df$original_order),]
for(i in 1:ncol(strike.combn)){
message(paste0(i,"/",ncol(strike.combn)))
state_vec = strike.combn[,i]
stock_tmp = arrow_debreu_systematic(opt.df, state_vec)
if(nrow(stock_tmp)==0){
next;
}
stock_tmp$strike.cohort = i
tot_list[[tot_index]] = stock_tmp
tot_index = tot_index + 1
}
}
stock_tot = rbindlist(tot_list)
stock_tot[,point:=as.numeric(arrowPrice>mean(arrowPrice)),by=.(cohort,strike.cohort,expiry)]
stock_tot$point[which(stock_tot$point==0)] = -1
stock_tot[,score:=max(inducedPrice)-min(inducedPrice),by=.(cohort,strike.cohort,expiry)]
stock_tot$score = stock_tot$score * stock_tot$point
stock_tab = stock_tot[,.(score=sum(score)),by=.(state,expiry)]
stock_tot = rbindlist(tot_list)
names(stock_tot)
nrow(stock_tot)/2
stock_tot$expiry = NA
stock_tot$expiry[68189:nrow(stock_tot)] = expiry
stock_tot$expiry[1:68188] = as.Date("2020-03-20")
stock_tot[,point:=as.numeric(arrowPrice>mean(arrowPrice)),by=.(cohort,strike.cohort,expiry)]
stock_tot$point[which(stock_tot$point==0)] = -1
stock_tot[,score:=max(inducedPrice)-min(inducedPrice),by=.(cohort,strike.cohort,expiry)]
stock_tot$score = stock_tot$score * stock_tot$point
stock_tab = stock_tot[,.(score=sum(score)),by=.(state,expiry)]
View(stock_tab)
stock_tab[score:=score-min(score),by=.(expiry)]
stock_tab[,score:=score-min(score),by=.(expiry)]
stock_tab[,score:=score/max(score),by=.(expiry)]
View(stock_tab)
stock_tab$stateCut = cut.breaks(stock_tab$state)
cut.breaks = function(vec,breaks=strike.seq){
cut.vec = cut(vec,breaks=breaks)
cut.low = as.numeric(str_match(cut.vec, "\\((.*?),")[,2])
cut.high = as.numeric(str_match(cut.vec, ",(.*?)\\]")[,2])
cut.nice = paste0(round(cut.low)," to ",round(cut.high))
return(cut.nice)
}
stock_tab$stateCut = cut.breaks(stock_tab$state)
?str_match
??str_match
list.of.packages <- c("ggplot2","data.table","scales","stringr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
cut.breaks = function(vec,breaks=strike.seq){
cut.vec = cut(vec,breaks=breaks)
cut.low = as.numeric(str_match(cut.vec, "\\((.*?),")[,2])
cut.high = as.numeric(str_match(cut.vec, ",(.*?)\\]")[,2])
cut.nice = paste0(round(cut.low)," to ",round(cut.high))
return(cut.nice)
}
stock_tab$stateCut = cut.breaks(stock_tab$state)
View(stock_tab)
stock_tot[,point:=as.numeric(arrowPrice>mean(arrowPrice)),by=.(cohort,strike.cohort,expiry)]
stock_tot$point[which(stock_tot$point==0)] = -1
stock_tot[,score:=max(inducedPrice)-min(inducedPrice),by=.(cohort,strike.cohort,expiry)]
stock_tot$score = stock_tot$score * stock_tot$point
stock_tab = stock_tot[,.(score=sum(score)),by=.(state,expiry)]
stock_tab[,score:=score-min(score),by=.(expiry)]
stock_tab[,score:=score/sum(score),by=.(expiry)]
stock_tab$stateCut = cut.breaks(stock_tab$state)
View(stock_tab)
unique.cuts = unique(stock_tot$stateCut)
unique.cuts
unique.cuts = unique(stock_tab$stateCut)
range_labels
?cut
vec = stock_tab$state
breaks = strike.seq
cut.vec = cut(vec,breaks=breaks)
cut.vec
vec
cut.vec
View(data.frame(vec,cut.vec))
breaks
copy(vec)
?cut
cut.vec = cut(vec,breaks=breaks,include.lowest=T)
View(data.frame(vec,cut.vec))
is.factor(cut.vec)
cut.vec = as.character(cut.vec)
cut.vec = cut(vec,breaks=breaks,include.lowest=T)
cut.vec = as.character(cut.vec)
cut.vec = gsub("[","(",cut.vec,fixed=T)
cut.breaks = function(vec,breaks=strike.seq){
cut.vec = cut(vec,breaks=breaks,include.lowest=T)
cut.vec = as.character(cut.vec)
cut.vec = gsub("[","(",cut.vec,fixed=T)
cut.low = as.numeric(str_match(cut.vec, "\\((.*?),")[,2])
cut.high = as.numeric(str_match(cut.vec, ",(.*?)\\]")[,2])
cut.nice = paste0(round(cut.low)," to ",round(cut.high))
return(cut.nice)
}
stock_tab$stateCut = cut.breaks(stock_tab$state)
View(stock_tab)
cut.vec = cut(vec,breaks=breaks)
cut.vec
vec+1
cut.vec = cut(vec+1,breaks=breaks)
View(data.frame(vec,cut.vec))
cut.vec = cut(vec,breaks=breaks)
cut.low = as.numeric(str_match(cut.vec, "\\((.*?),")[,2])
cut.high = as.numeric(str_match(cut.vec, ",(.*?)\\]")[,2])
cut.nice = paste0(round(cut.low)," to ",round(cut.high))
cut.nice
cut.nice[which(cut.nice=="NA to NA")] = paste0(strike.seq[length(strike.seq)],"+")
cut.nice
cut.breaks = function(vec,breaks=strike.seq){
cut.vec = cut(vec,breaks=breaks)
cut.low = as.numeric(str_match(cut.vec, "\\((.*?),")[,2])
cut.high = as.numeric(str_match(cut.vec, ",(.*?)\\]")[,2])
cut.nice = paste0(round(cut.low)," to ",round(cut.high))
cut.nice[which(cut.nice=="NA to NA")] = paste0(strike.seq[length(strike.seq)],"+")
return(cut.nice)
}
stock_tab$stateCut = cut.breaks(stock_tab$state)
unique.cuts = unique(stock_tab$stateCut)
unique.cuts
stock_tab = stock_tab[order(stock_tab$state),]
stock_tab$stateCut = cut.breaks(stock_tab$state)
unique.cuts = unique(stock_tab$stateCut)
unique.cuts
View(stock_tab)
range_labels
cut.breaks = function(vec,breaks=strike.seq){
cut.vec = cut(vec,breaks=breaks,include.lowest=T)
cut.vec = as.character(cut.vec)
cut.vec = gsub("[","(",cut.vec,fixed=T)
cut.low = as.numeric(str_match(cut.vec, "\\((.*?),")[,2])
cut.high = as.numeric(str_match(cut.vec, ",(.*?)\\]")[,2])
cut.nice = paste0(round(cut.low)," to ",round(cut.high))
return(cut.nice)
}
stock_tot[,point:=as.numeric(arrowPrice>mean(arrowPrice)),by=.(cohort,strike.cohort,expiry)]
stock_tot$point[which(stock_tot$point==0)] = -1
stock_tot[,score:=max(inducedPrice)-min(inducedPrice),by=.(cohort,strike.cohort,expiry)]
stock_tot$score = stock_tot$score * stock_tot$point
stock_tab = stock_tot[,.(score=sum(score)),by=.(state,expiry)]
stock_tab[,score:=score-min(score),by=.(expiry)]
stock_tab[,score:=score/sum(score),by=.(expiry)]
stock_tab = stock_tab[order(stock_tab$state),]
stock_tab$stateCut = cut.breaks(stock_tab$state)
unique.cuts = unique(stock_tab$stateCut)
unique.cuts
View(stock_tab)
cut.vec = cut(vec,breaks=breaks,right=T)
cut.vec
View(data.frame(vec,cut.vec))
cut.vec = cut(vec,breaks=breaks)
cut.vec
cut.vec = cut(vec,breaks=breaks,right=F)
View(data.frame(vec,cut.vec))
cut.low = as.numeric(str_match(cut.vec, "\\[(.*?),")[,2])
cut.high = as.numeric(str_match(cut.vec, ",(.*?)\\)")[,2])
cut.nice = paste0(round(cut.low)," to ",round(cut.high))
View(data.frame(vec,cut.nice))
cut.nice[which(cut.nice=="NA to NA")] = paste0(strike.seq[length(strike.seq)],"+")
View(data.frame(vec,cut.nice))
cut.breaks = function(vec,breaks=strike.seq){
cut.vec = cut(vec,breaks=breaks,right=F)
cut.low = as.numeric(str_match(cut.vec, "\\[(.*?),")[,2])
cut.high = as.numeric(str_match(cut.vec, ",(.*?)\\)")[,2])
cut.nice = paste0(round(cut.low)," to ",round(cut.high))
cut.nice[which(cut.nice=="NA to NA")] = paste0(strike.seq[length(strike.seq)],"+")
return(cut.nice)
}
stock_tot[,point:=as.numeric(arrowPrice>mean(arrowPrice)),by=.(cohort,strike.cohort,expiry)]
stock_tot$point[which(stock_tot$point==0)] = -1
stock_tot[,score:=max(inducedPrice)-min(inducedPrice),by=.(cohort,strike.cohort,expiry)]
stock_tot$score = stock_tot$score * stock_tot$point
stock_tab = stock_tot[,.(score=sum(score)),by=.(state,expiry)]
stock_tab[,score:=score-min(score),by=.(expiry)]
stock_tab[,score:=score/sum(score),by=.(expiry)]
stock_tab$expiry = as.Date(stock_tab$expiry)
stock_tab$expiry = as.Date(stock_tab$expiry,origin="1970-01-01")
View(stock_tab)
stock_tab = stock_tab[order(stock_tab$state),]
stock_tab$stateCut = cut.breaks(stock_tab$state)
unique.cuts = unique(stock_tab$stateCut)
break.grid = expand.grid(expiry=unique(stock_tab$expiry),stateCut=unique.cuts)
stock_tab = merge(tock_tab,by=c("expiry","stateCut"),all=T)
stock_tab = merge(stock_tab,by=c("expiry","stateCut"),all=T)
stock_tot[,point:=as.numeric(arrowPrice>mean(arrowPrice)),by=.(cohort,strike.cohort,expiry)]
stock_tot$point[which(stock_tot$point==0)] = -1
stock_tot[,score:=max(inducedPrice)-min(inducedPrice),by=.(cohort,strike.cohort,expiry)]
stock_tot$score = stock_tot$score * stock_tot$point
stock_tab = stock_tot[,.(score=sum(score)),by=.(state,expiry)]
stock_tab[,score:=score-min(score),by=.(expiry)]
stock_tab[,score:=score/sum(score),by=.(expiry)]
stock_tab = stock_tab[order(stock_tab$state),]
stock_tab$stateCut = cut.breaks(stock_tab$state)
unique.cuts = unique(stock_tab$stateCut)
break.grid = expand.grid(expiry=unique(stock_tab$expiry),stateCut=unique.cuts)
stock_tab = merge(stock_tab,by=c("expiry","stateCut"),all=T)
stock_tab = merge(stock_tab,brea.grid,by=c("expiry","stateCut"),all=T)
stock_tab = merge(stock_tab,break.grid,by=c("expiry","stateCut"),all=T)
View(stock_tab)
stock_tab$stateCut = factor(
stock_tab$stateCut,
levels=rev(unique.cuts)
)
stock_tab$score[which(is.na(stock_tab$score))] = 0
stock_tab = stock_tab[order(stock_tab$expiry, stock_tab$stateCut)]
View(stock_tab)
ggplot(stock_tab,aes(x=expiry,y=score,group=stateCut,fill=stateCut)) +
geom_area() +
theme_classic() +
theme(legend.title=element_blank()) +
scale_y_continuous(labels=percent) +
labs(y="Implied probability", x="Expiry")
strike.range = c(0, 600)
strike.seq = round(seq.int(strike.range[1],strike.range[2],length.out=10))
list.of.packages <- c("ggplot2","data.table","scales","stringr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
setwd("~/git/alexm-finance")
source("arrow_systematic.R")
source("yahoo_data.R")
psum <- function(...,na.rm=FALSE) {
rowSums(do.call(cbind,list(...)),na.rm=na.rm)
}
setwd("~/Data/options")
max_opt = 50
symbol = "TSLA"
urls = c(
"https://finance.yahoo.com/quote/TSLA/options?p=TSLA&date=1584662400",
"https://finance.yahoo.com/quote/TSLA/options?date=1585267200&p=TSLA",
"https://finance.yahoo.com/quote/TSLA/options?date=1585872000&p=TSLA",
"https://finance.yahoo.com/quote/TSLA/options?date=1586390400&p=TSLA",
"https://finance.yahoo.com/quote/TSLA/options?date=1587081600&p=TSLA"
)
strike.range = c(0, 600)
strike.seq = round(seq.int(strike.range[1],strike.range[2],length.out=10))
strike.combn = expand.grid(strike.seq,strike.seq)
strike.combn = subset(strike.combn,Var1!=Var2)
strike.combn = t(as.matrix(strike.combn))
range_labels = paste(lag(strike.seq),strike.seq[2:length(strike.seq)],sep=" to ")
range_labels = range_labels[1:length(range_labels)-1]
cut.breaks = function(vec,breaks=strike.seq){
cut.vec = cut(vec,breaks=breaks,right=F)
cut.low = as.numeric(str_match(cut.vec, "\\[(.*?),")[,2])
cut.high = as.numeric(str_match(cut.vec, ",(.*?)\\)")[,2])
cut.nice = paste0(round(cut.low)," to ",round(cut.high))
cut.nice[which(cut.nice=="NA to NA")] = paste0(strike.seq[length(strike.seq)],"+")
return(cut.nice)
}
tot_list = list()
tot_index = 1
for(url in urls){
opt.df = yahoo_opt(url)
underlying = opt.df$underlying[[1]]
expiry = opt.df$expiry[1]
opt.df$int.and.volume = psum(opt.df$open.int, opt.df$volume, na.rm=T)
opt.df = subset(opt.df,price>0 & (int.and.volume)>0)
if(nrow(opt.df)<max_opt){next}
opt.df$original_order = c(1:nrow(opt.df))
opt.df = opt.df[order(-opt.df$volume),][c(1:max_opt),]
opt.df = opt.df[order(opt.df$original_order),]
for(i in 1:ncol(strike.combn)){
message(paste0(i,"/",ncol(strike.combn)))
state_vec = strike.combn[,i]
stock_tmp = arrow_debreu_systematic(opt.df, state_vec)
if(nrow(stock_tmp)==0){
next;
}
stock_tmp$strike.cohort = i
stock_tmp$expiry = expiry
tot_list[[tot_index]] = stock_tmp
tot_index = tot_index + 1
}
}
stock_tot = rbindlist(tot_list)
stock_tot[,point:=as.numeric(arrowPrice>mean(arrowPrice)),by=.(cohort,strike.cohort,expiry)]
stock_tot$point[which(stock_tot$point==0)] = -1
stock_tot[,score:=max(inducedPrice)-min(inducedPrice),by=.(cohort,strike.cohort,expiry)]
stock_tot$score = stock_tot$score * stock_tot$point
stock_tab = stock_tot[,.(score=sum(score)),by=.(state,expiry)]
stock_tab[,score:=score-min(score),by=.(expiry)]
stock_tab[,score:=score/sum(score),by=.(expiry)]
stock_tab = stock_tab[order(stock_tab$state),]
stock_tab$stateCut = cut.breaks(stock_tab$state)
unique.cuts = unique(stock_tab$stateCut)
break.grid = expand.grid(expiry=unique(stock_tab$expiry),stateCut=unique.cuts)
stock_tab = merge(stock_tab,break.grid,by=c("expiry","stateCut"),all=T)
stock_tab$stateCut = factor(
stock_tab$stateCut,
levels=rev(unique.cuts)
)
stock_tab$score[which(is.na(stock_tab$score))] = 0
stock_tab = stock_tab[order(stock_tab$expiry, stock_tab$stateCut)]
ggplot(stock_tab,aes(x=expiry,y=score,group=stateCut,fill=stateCut)) +
geom_area() +
theme_classic() +
theme(legend.title=element_blank()) +
scale_y_continuous(labels=percent) +
labs(y="Implied probability", x="Expiry")
list.of.packages <- c("ggplot2","data.table","scales")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
setwd("~/git/alexm-finance")
source("arrow_systematic.R")
source("yahoo_data.R")
psum <- function(...,na.rm=FALSE) {
rowSums(do.call(cbind,list(...)),na.rm=na.rm)
}
setwd("~/Data/options")
max_opt = 50
url = "https://finance.yahoo.com/quote/TSLA/options?p=TSLA"
symbol = "TSLA"
opt.df = yahoo_opt(url)
underlying = opt.df$underlying[[1]]
expiry = opt.df$expiry[1]
opt.df$int.and.volume = psum(opt.df$open.int, opt.df$volume, na.rm=T)
opt.df = subset(opt.df,price>0 & (int.and.volume)>0)
opt.df$original_order = c(1:nrow(opt.df))
this.max.opt = min(nrow(opt.df), max_opt)
opt.df = opt.df[order(-opt.df$int.and.volume),][c(1:this.max.opt),]
opt.df = opt.df[order(opt.df$original_order),]
# strike.range = range(opt.df$strike)
strike.range = c(0, 500)
strike.seq = seq.int(strike.range[1],strike.range[2],length.out=20)
strike.combn = expand.grid(strike.seq,strike.seq)
strike.combn = subset(strike.combn,Var1!=Var2)
strike.combn = t(as.matrix(strike.combn))
tot_list = list()
tot_index = 1
for(i in 1:ncol(strike.combn)){
message(paste0(i,"/",ncol(strike.combn)))
state_vec = strike.combn[,i]
stock_tmp = arrow_debreu_systematic(opt.df, state_vec)
if(nrow(stock_tmp)==0){
next;
}
stock_tmp$strike.cohort = i
tot_list[[tot_index]] = stock_tmp
tot_index = tot_index + 1
}
stock_tot = rbindlist(tot_list)
stock_tot[,point:=as.numeric(arrowPrice>mean(arrowPrice)),by=.(cohort,strike.cohort)]
stock_tot$point[which(stock_tot$point==0)] = -1
stock_tot[,score:=max(inducedPrice)-min(inducedPrice),by=.(cohort,strike.cohort)]
stock_tot$score = stock_tot$score * stock_tot$point
stock_tab = stock_tot[,.(score=sum(score)),by=.(state)]
ggplot(stock_tab,aes(x=state,y=score)) +
geom_bar(stat="identity",fill="#cc0000") +
theme_classic() +
labs(x=paste("State scores for options expiring", expiry), y="State score")
print(stock_tab$state[which.max(stock_tab$score)])
print(underlying)
list.of.packages <- c("jsonlite","data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
base_package_url = "http://data.census.ke/api/3/action/package_list"
first_page = fromJSON(base_package_url)
View(first_page)
table_names = c(table_names, first_page["results"])
table_names = c()
table_names = c(table_names, first_page["results"])
table_names = c()
table_names = c(table_names, first_page[["results"]])
first_page['results']
names(first_page)
table_names = c(table_names, first_page[["result"]])
package_url = "http://data.census.ke/api/3/action/package_list"
package_data = fromJSON(package_url)
list.of.packages <- c("jsonlite","data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
package_url = "http://data.census.ke/api/3/action/package_list"
package_data = fromJSON(package_url)
table_names = package_data[["result"]]
setwd("~/git/ke_census")
table_name = table_names[1]
base_dl_url = "http://data.census.ke/api/3/action/package_show?id="
dl_data = fromJSON(paste0(base_dl_url, table_name))
View(dl_data)
names(dl_data[["result"]])
res = dl_data[["result"]]
View(res)
sapply(length,res)
sapply(res, length)
res_lengths = sapply(res, length)
res[res_lengths==1]
flat_res = data.frame(res[res_lengths==1])
View(flat_res)
View(res)
View(data.frame(res[["resources"]]))
resources = data.frame(res[["resources"]])
names(resources)
View(resources)
resources = subset(resources, format=="CSV")
flat_res = cbind(flat_res, resources)
View(flat_res)
names(flat_res)
list.of.packages <- c("jsonlite","data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
setwd("~/git/ke_census/data")
package_url = "http://data.census.ke/api/3/action/package_list"
package_data = fromJSON(package_url)
table_names = package_data[["result"]]
metadata_list = list()
metadata_index = 1
base_dl_url = "http://data.census.ke/api/3/action/package_show?id="
for(table_name in table_names){
dl_data = fromJSON(paste0(base_dl_url, table_name))
res = dl_data[["result"]]
res_lengths = sapply(res, length)
flat_res = data.frame(res[res_lengths==1])
resources = data.frame(res[["resources"]])
resources = subset(resources, format=="CSV")
if(nrow(resources)==1){
flat_res = cbind(flat_res, resources)
}
metadata_list[[metadata_index]] = flat_res
metadata_index = metadata_index + 1
}
metadata = rbindlist(metadata_list)
fwrite(metadata,"ke_census_metadata.csv")
metadata = rbindlist(metadata_list, fill=T)
fwrite(metadata,"ke_census_metadata.csv")
list.of.packages <- c("jsonlite","data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
setwd("~/git/ke_census_2020/data")
package_url = "http://data.census.ke/api/3/action/package_list"
package_data = fromJSON(package_url)
table_names = package_data[["result"]]
metadata_list = list()
metadata_index = 1
base_dl_url = "http://data.census.ke/api/3/action/package_show?id="
for(table_name in table_names){
dl_data = fromJSON(paste0(base_dl_url, table_name))
res = dl_data[["result"]]
res_lengths = sapply(res, length)
flat_res = data.frame(res[res_lengths==1])
resources = data.frame(res[["resources"]])
resources_csv = subset(resources, format=="CSV")
resources_xlsx = subset(resources, format=="XLSX")
if(nrow(resources_csv)==1){
flat_res = cbind(flat_res, resources_csv)
}else if(nrow(resources_xlsx)==1){
flat_res = cbind(flat_res, resources_xlsx)
}
metadata_list[[metadata_index]] = flat_res
metadata_index = metadata_index + 1
}
metadata = rbindlist(metadata_list, fill=T)
fwrite(metadata,"ke_census_metadata.csv")
View(resources_csv)
names(resources_csv) = paste0("download_", names(resources_csv))
View(resources_csv)
list.of.packages <- c("jsonlite","data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
setwd("~/git/ke_census_2020/data")
package_url = "http://data.census.ke/api/3/action/package_list"
package_data = fromJSON(package_url)
table_names = package_data[["result"]]
metadata_list = list()
metadata_index = 1
base_dl_url = "http://data.census.ke/api/3/action/package_show?id="
for(table_name in table_names){
dl_data = fromJSON(paste0(base_dl_url, table_name))
res = dl_data[["result"]]
res_lengths = sapply(res, length)
flat_res = data.frame(res[res_lengths==1])
resources = data.frame(res[["resources"]])
resources_csv = subset(resources, format=="CSV")
resources_xlsx = subset(resources, format=="XLSX")
if(nrow(resources_csv)==1){
names(resources_csv) = paste0("download_", names(resources_csv))
flat_res = cbind(flat_res, resources_csv)
}else if(nrow(resources_xlsx)==1){
names(resources_xlsx) = paste0("download_", names(resources_xlsx))
flat_res = cbind(flat_res, resources_xlsx)
}
metadata_list[[metadata_index]] = flat_res
metadata_index = metadata_index + 1
}
metadata = rbindlist(metadata_list, fill=T)
fwrite(metadata,"ke_census_metadata.csv")
